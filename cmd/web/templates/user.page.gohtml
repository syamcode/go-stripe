{{template "base" .}}

{{define "title"}}
    User
{{end}}

{{define "content"}}
    <h2 class="mt-3 text-center">User</h2>
    <hr>
    <form method="post" action="" name="user_form" id="user_form"
    class="needs-validation" autocomplete="off" novalidate="">

        <div class="mb-3">
            <label for="first_name" class="form-label">First Name</label>
            <input type="text" class="form-control" id="first_name" name="first_name"
                required="" autocomplete="first_name-new">
        </div>

        <div class="mb-3">
            <label for="last_name" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="last_name" name="last_name"
                required="" autocomplete="last_name-new">
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email"
                required="" autocomplete="email-new">
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password</label>
            <input type="password" class="form-control" id="password" name="password"
                autocomplete="password-new">
        </div>

        <div class="mb-3">
            <label for="confirm_password" class="form-label">Confirm Password</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password"
                autocomplete="confirm_password-new">
        </div>

        <hr>

        <div class="float-start">
            <a class="btn btn-primary" href="javascript:void(0);" id="saveBtn">Save Changes</a>
            <a class="btn btn-warning" href="/admin/users" id="cancelBtn">Cancel</a>
        </div>
        <div class="float-end">
            <a class="btn btn-danger d-none" href="javascript:void(0);" id="deleteBtn">Delete</a>
        </div>

        <div class="clearfix"></div>
    </form>
{{end}}

{{define "js"}}
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const token = localStorage.getItem("token");
        const messages = document.getElementById("messages");
        const delBtn = document.getElementById("deleteBtn");
        const saveBtn = document.getElementById("saveBtn");

        if ({{index .IntMap "id"}} !== 0) {
            if ({{index .IntMap "id"}} !== {{.UserID}}) {
                delBtn.classList.remove("d-none");
            }
            const requestOptions = {
                method: 'get',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token,
                }
            }

            fetch('{{.API}}/api/admin/users/{{index .IntMap "id"}}', requestOptions)
            .then(response => response.json())
            .then(data => {
                if (data) {
                    document.getElementById("first_name").value = data.first_name;
                    document.getElementById("last_name").value = data.last_name;
                    document.getElementById("email").value = data.email;
                }
            })
        }

        delBtn.addEventListener("click", function(event) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to undo this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Delete User'
            }).then((result) => {
                if(result.isConfirmed) {
                    const requestOptions = {
                        method: 'delete',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                            'Authorization': 'Bearer ' + token,
                        },
                    }

                    fetch('{{.API}}/api/admin/users/{{index .IntMap "id"}}', requestOptions)
                    .then(response => response.json())
                    .then(data => {
                        if (data.error) {
                            Swal.fire("Error: ", data.message);
                        } else {
                            location.href = "/admin/users";
                        }
                    })
                }
            })
        })

        saveBtn.addEventListener("click", function(event) {
            const form = document.getElementById("user_form");
            if (form.checkValidity() === false) {
                this.event.preventDefault();
                this.event.stopPropagation();
                form.classList.add("was-validated");
                return
            }
            form.classList.add("was-validated");

            if (document.getElementById("password").value !== document.getElementById("confirm_password").value) {
                Swal.fire("Passwords do not match");
                return
            }

            const payload = {
                first_name: document.getElementById("first_name").value,
                last_name: document.getElementById("last_name").value,
                email: document.getElementById("email").value,
                password: document.getElementById("password").value,
            }

            const requestOptions = {
                method: 'post',
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'Authorization': 'Bearer ' + token,
                },
                body: JSON.stringify(payload),
            }
            
            if ({{index .IntMap "id"}} !== 0) {
                // Edit User
                requestOptions.method = "put";
                fetch('{{.API}}/api/admin/users/{{index .IntMap "id"}}', requestOptions)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire("Error: ", data.message);
                    } else {
                        location.href = "/admin/users";
                    }
                })
            } else {
                // Add User

                if (payload.password === "") {
                    Swal.fire("Please enter the password");
                    return
                }

                fetch('{{.API}}/api/admin/users', requestOptions)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        Swal.fire("Error: ", data.message);
                    } else {
                        location.href = "/admin/users";
                    }
                })
            }

        })
    </script>
{{end}}